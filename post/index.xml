<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on fabrik</title>
    <link>https://fabrik.red/post/</link>
    <description>Recent content in Posts on fabrik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 May 2017 15:29:59 +0200</lastBuildDate>
    
	<atom:link href="https://fabrik.red/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install the image</title>
      <link>https://fabrik.red/post/test/</link>
      <pubDate>Sun, 14 May 2017 15:29:59 +0200</pubDate>
      
      <guid>https://fabrik.red/post/test/</guid>
      <description>Download the image: disk.tar.gz
The image works in AWS, GCE, and other providers that allow custom images like vultr.com, netcup, lunanode or locally by using VirtualBox
One advantage of using GCE google compute engine is that the image can be uploaded compressed tar.gz for other providers needs to be uncompressed and upload the plain 2GB disk.raw.
 Because of this the image is just created using 2GB and later needs to be expanded.</description>
    </item>
    
    <item>
      <title>Creating the image (disk.raw)</title>
      <link>https://fabrik.red/post/creating-the-image/</link>
      <pubDate>Sun, 07 May 2017 15:30:48 +0200</pubDate>
      
      <guid>https://fabrik.red/post/creating-the-image/</guid>
      <description>Creating the image (disk.raw) TL;DR:
Login to an existing FreeBSD system and run:
fetch -qo - https://raw.githubusercontent.com/fabrik-red/images/master/fabrik.sh | sh  or
curl -sL https://raw.githubusercontent.com/fabrik-red/images/master/fabrik.sh | sh  The fastest way of doing this (less than 1 hour) is to use AWS and chose the c4.8xlarge instance, at the moment of writhing this, is an instance with 36 vCPU / 60 RAM, the important thing to check for, is the amount of cores not really the memory.</description>
    </item>
    
    <item>
      <title>Default username, password</title>
      <link>https://fabrik.red/post/default-user/</link>
      <pubDate>Sun, 07 May 2017 15:28:59 +0200</pubDate>
      
      <guid>https://fabrik.red/post/default-user/</guid>
      <description>devops is the only username created with password fabrik.
After verifying that image is booting, log in to the instance, change the password or configure ssh to only allow access by using ssh keys.
If using AWS or GCE the image will try to fetch the ssh public key on the firstboot, and add it to the ~/.ssh/authorized_keys file.
GCE For GCE this URL is used in gce_firstboot:
http://169.254.169.254/computeMetadata/v1/project/attributes/ssh-keys More info can be found here: https://cloud.</description>
    </item>
    
    <item>
      <title>resize ZFS</title>
      <link>https://fabrik.red/post/zfs-resize/</link>
      <pubDate>Sun, 07 May 2017 10:16:17 +0200</pubDate>
      
      <guid>https://fabrik.red/post/zfs-resize/</guid>
      <description>The disk.raw automatically on the firstboot will try to resize the disk
 After booting the ZFS pool need to be increased:
$ gpart show da0  Example of output:
root@/:~ # gpart show =&amp;gt; 40 503316400 da0 GPT (240G) 40 1024 1 freebsd-boot (512K) 1064 2097152 2 freebsd-swap (1.0G) 2098216 984 - free - (492K) 2099200 2093056 3 freebsd-zfs (1.0G) 4192256 499124184 - free - (1.0M) Then type gpart recover da0:</description>
    </item>
    
    <item>
      <title>After booting</title>
      <link>https://fabrik.red/post/after/</link>
      <pubDate>Fri, 05 May 2017 23:34:16 +0200</pubDate>
      
      <guid>https://fabrik.red/post/after/</guid>
      <description>The image is not tuned, and has only been configured to boot in as many providers as possible, therefore extra adjustments need to be done after booting, starting by removing/changing the password for the user devops
In case not using GCE the mtu 1460 option may be removed from the rc.conf:
ifconfig_DEFAULT=&amp;quot;SYNCDHCP mtu 1460&amp;quot;  To:
ifconfig_DEFAULT=&amp;quot;SYNCDHCP&amp;quot;  The image has been build using this src.conf, this kernel and the jail using this src-jail.</description>
    </item>
    
    <item>
      <title>Upload AMI to AWS</title>
      <link>https://fabrik.red/post/aws-ami/</link>
      <pubDate>Thu, 04 May 2017 10:47:11 +0200</pubDate>
      
      <guid>https://fabrik.red/post/aws-ami/</guid>
      <description>To upload the AMI to AWS download the image disk.tar.gz and unpack it:
tar jxf disk.tar.gz  Install the CLI tool: http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-clt.pdf#tools-introduction
Create a bucket in us-east (N.Virginia) region named something like us-east-freebsd-ami an then upload the raw by using this command:
ec2-import-volume disk.raw -f raw -z us-east-1a -b us-east-freebsd-ami -o AWS_ACCESS_KEY -w AWS_SECRET_KEY After finish you can check the task by using:
ec2-describe-conversion-tasks To upload to another region for example in Europe:</description>
    </item>
    
    <item>
      <title>Uplod image to Google GCP</title>
      <link>https://fabrik.red/post/google/</link>
      <pubDate>Thu, 04 May 2017 09:14:58 +0200</pubDate>
      
      <guid>https://fabrik.red/post/google/</guid>
      <description>To upload the image to GCP download the image disk.tar.gz and upload it to your bucket:
gsutil cp disk.tar.gz gs://your-bucket/  probably you will need to run gcloud init, more info: https://cloud.google.com/storage/docs/gsutil_install
 Then create the image:
gcloud compute images create freebsd --source-uri gs://your-bucket/disk.tar.gz The output should be like:
Created [https://www.googleapis.com/compute/v1/projects/x-fabric-167819/global/images/freebsd]. NAME PROJECT FAMILY DEPRECATED STATUS freebsd x-fabric-167819 READY Before starting the instance ssh-keys could be added on the [metadata section](https://cloud.</description>
    </item>
    
  </channel>
</rss>